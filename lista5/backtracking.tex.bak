\documentclass[a4paper,11pt]{article}
\usepackage[latin1]{inputenc}
\usepackage[brazil]{babel}
\usepackage[T1]{fontenc}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{enumitem,multicol}
\usepackage{ae}
\usepackage{qtree}
\usepackage{tikz}
\usepackage{tikz-qtree}
\usepackage{multirow}
\usepackage{longtable}
\usepackage{listings}

\usetikzlibrary{trees}
\usetikzlibrary{positioning}

\usepackage{graphicx,color}
\usepackage{algorithm}
\usepackage{algorithmic}
\usepackage{algorithmic,float}
\algsetup{linenosize=\tiny}

\usepackage{multicol}
\usepackage{cancel}

\newtheorem{definition}{Definicao}
\newtheorem{property}{Property}
\newtheorem{example}{Example}
\newtheorem{teorema}{Teorema}


\newcommand{\floor}[1]{\lfloor #1 \rfloor}

\newenvironment{proof}[1][Prova]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}]}{\end{trivlist}}

\setlength{\textheight}{22 cm}

\begin{document}

\textbf{Algoritmos de Backtracking}


\begin{enumerate}
\item (Expressões) Faça um algoritmo para, dados n+1 números inteiros positivos,
verificar se é possível escrever o primeiro como uma combinação linear dos n restantes (usando somas e subtrações, apenas).
Exemplo: para \{13, 9, 5, 11, 20\} é possível, pois 13 = 9 - 5 - 11 + 20; já para \{3, 200,150, 8, 15\} não é possível.

Restrições N $\leq $10

\item (Jogo do Palito) Implementar um programa para o Jogo do Último palito, onde dois jogadores iniciam com uma pilha de 24 palitos e, alternadamente, cada um pode retirar 1 a 3 palitos, vencendo o último a retirar palitos.

\item (Jogo da Multiplicação) Jogo da Multiplicação, onde é sorteado um número menor que 100. Começasse com o número 1 e, alternadamente, cada adversário multiplica esse número por outro que pode variar entre 2 e 5. Aquele que atingir ou superar o número escolhido é o vencedor.

\begin{tabular}{|l|l|}
\hline
Entrada & Saída \\
\hline
30       & O jogador 1 vence \\
\hline
\end{tabular}

\item (Change for nothing) In a previous life, you worked as a cashier in the lost
Antarctican colony of Nadira, spending the better part of your day giving change to your customers. Because paper is a very rare and valuable resource in Antarctica, cashiers were required by law to use the fewest bills possible whenever they gave change. Thanks to the numerological predilections of one of its founders, the currency of Nadira, called Dream Dollars, was available in the following denominations: \$1, \$4, \$7, \$13, \$28, \$52, \$91, \$365. Describe and analyze a recursive algorithm that computes, given an integer k, the minimum number of bills needed to make k Dream Dollars.


\item (Vasos) Dados 3 vasos contendo água, com capacidades $(c_1, c_2, c_3)$, situação inicial
$(s_1, s_2, s_3)$, quer-se determinar qual o número mínimo de operações de transferência, para se atingir o objetivo $(o_1, o_2, o_3)$ dado. Cada transferência têm um vaso de origem e um vaso de destino. Se a água do vaso de origem não é suficiente para completar a capacidade do vaso de destino, então toda a água do vaso de origem é transferida para o vaso de destino. Caso contrário, somente a quantidade de água necessária para completar o vaso de destino é transferida. Toda quantidade de água é mantida no processo. Observe que pode não haver solução.

\begin{tabular}{|l|l|}
\hline
Entrada & Saída  \\
\hline
$c_1 \quad c_2 \quad c_3 \quad s_1 \quad s_2 \quad s_3 \quad o_1 \quad o_2 \quad o_3$ & movimentos \\
5 4 1  1 0 1  0 2 0 & 2  \\
5 4 1  1 0 1  0 3 0 & -1 \\
5 4 1  1 0 1  0 0 2 & -1 \\
5 4 1  1 0 1  1 0 1 & 0  \\
5 4 1  0 4 0  3 0 1 & 2 \\
\hline
\end{tabular}


\item (Percurso do cavalo)  Faça um cavalo percorrer todas as casas de um tabuleiro de
xadrez de forma a não repetir nenhuma posição pela qual já passou.
Dica: tentar uma heurística para dar preferência para casas com menos possibilidades de saídas.

\item (Quebra cabeça) Descrever um algoritmo para solucionar o quebra-cabeça que
consiste de um tabuleiro de 3 x 3, com 8 peças contendo os números 1 a 8 e um uma posição nula. É dada uma configuração inicial e quer-se a chegar à configuração padrão onde os números estão ordenados no tabuleiro.

\item Dada uma sequência de n números inteiros (n < 101), quer-se determinar a ordem de contrações a serem feitas, tal que o resultado final seja um número p dado. Cada contração toma dois elementos vizinhos da sequência, substitui o primeiro pela diferença entre ele e seguinte, e elimina o elemento seguinte.

Formalmtente, a operação de contração pode ser definida como:

$con(a, i) = [ a_1, \ldots,a_{i-1},a_i - a_{i+1}, a_{i+2},\ldots,a_n ]$

Por exemplo, aplicando as contrações 2,3,2 e 1 na sequência [12,10,4,3,5] obtemos o número 4:

\begin{tabular}{lll}
con( [12,10,4,3,5], 2) & = &  [12,10-4,3,5]\\
con( [12,6,3,5], 3) & = &  [12,6,3-5]\\
con( [12,6,-2], 2) & = &  [12,6-(-2)]\\
con( [12,8], 1) & = &  [4]\\
\end{tabular}

\begin{tabular}{|l|l|l|l|}
\hline
n & p & $[a_1,\ldots,a_n]$ & $[c_1,\ldots,c_{n-1}]$ \\
\hline
4 & 5 & [10,2,5,2] & [1,2,1] \\
\hline
5 & 4 & [12,10,4,3,5] & [2,3,2,1]\\
\hline
\end{tabular}


\item (Permutações com repetições) Dados n números, onde há repetições, listar as Permutações, sem repetir nenhuma configuração.

\item (Problemas em grafos)Fazer um algoritmo para encontrar o maior conjunto independente de um grafo.

\item (Cortes) Dado um tronco de madeira de tamanho n, que deve ser cortado em k
tamanhos, $t_1, t_2, t3, \ldots, t_k$, em uma máquina onde o custo de cada corte é
proporcional ao tamanho da peça cortada, determinar o custo mínimo do
processo de corte para se obter os pedaços desejados.



\end{enumerate}



\end{document}

